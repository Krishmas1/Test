method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 7)
tree_approach2 <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
library(tidyverse)
library(caret)
library(rattle)
library(rpart)
data(PimaIndiansDiabetes)
df <- tibble(PimaIndiansDiabetes)
df <- df %>% select(-pregnant, -glucose, -pressure, -triceps)
df <- df %>% rename(target=diabetes)
df <- df %>%
mutate(target = as.factor(target),
)
splitIndex <- createDataPartition(df$target, p = .85,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 7)
tree_approach2 <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
tuneGrid
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
tree_approach2 <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
tree_approach2 <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:10))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = ">50K")
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
pred <- predict(forest_ranger, df_test,type = "class")
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = ">50K")
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
df$target
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger2 <- train(target~., data=df_train,
method = "mda",
trControl = trControl,
tuneGrid = tuneGrid)
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl,
tuneGrid = tuneGrid)
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "lda",
trControl = trControl,
tuneGrid = tuneGrid)
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl,
tuneGrid = tuneGrid)
trControl = trainControl(method = "cv",
number = 7)
forest_ranger2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl)
plot(forest_ranger2)
pred <- predict(forest_ranger2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
trControl = trainControl(method = "cv",
number = 7)
forest_ranger3 <- train(target~., data=df_train,
method = "glmnet",
trControl = trControl)
trControl = trainControl(method = "cv",
number = 7)
forest_ranger3 <- train(target~., data=df_train,
method = "glmnet",
trControl = trControl)
forest_ranger2 <- train(target~., data=df_train,
method = "mda",
trControl = trControl)
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
library(tidyverse)
library(caret)
library(rattle)
library(rpart)
data(PimaIndiansDiabetes)
df <- tibble(PimaIndiansDiabetes)
df <- df %>% select(-pregnant, -glucose, -pressure, -triceps)
df <- df %>% rename(target=diabetes)
df <- df %>%
mutate(target = as.factor(target),
)
splitIndex <- createDataPartition(df$target, p = .85,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
trControl = trainControl(method = "cv",
number = 7)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
trControl = trainControl(method = "cv",
number = 7)
forest_ranger2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl)
pred <- predict(forest_ranger2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
trControl = trainControl(method = "cv",
number = 7)
tree <- train(target~., data=df_train,
method = "glmnet",
trControl = trControl)
forest_ranger3 <- train(target~., data=df_train,
method = "glmnet",
trControl = trControl)
forest_ranger4 <- train(target~., data=df_train,
method = "mda",
trControl = trControl)
'Random Forest' = forest_ranger,
trControl = trainControl(method = "cv",
number = 7)
forest_ranger3 <- train(target~., data=df_train,
method = "glmnet",
trControl = trControl)
forest_ranger4 <- train(target~., data=df_train,
method = "mda",
trControl = trControl)
results <- resamples(list('Random Forest' = forest_ranger,
'MDA'= MDA))
trControl = trainControl(method = "cv",
number = 7)
forest_ranger3 <- train(target~., data=df_train,
method = "glmnet",
trControl = trControl)
forest_ranger4 <- train(target~., data=df_train,
method = "mda",
trControl = trControl)
results <- resamples(list('Random Forest' = forest_ranger,
'mda'= mda))
trControl = trainControl(method = "cv",
number = 7)
forest_ranger3 <- train(target~., data=df_train,
method = "glmnet",
trControl = trControl)
forest_ranger4 <- train(target~., data=df_train,
method = "mda",
trControl = trControl)
results <- resamples(list('Random Forest' = forest_ranger3,
'Forest 4'=forest_ranger4 ))
bwplot(results)
pred <- predict(forest_ranger3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
pred <- predict(forest_ranger3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
df = read_csv(`hdd0318cy.sas7bdat`)
library(haven)
df = read_csv(`hdd0318cy.sas7bdat`)
library(haven)
df = read_sas(`hdd0318cy.sas7bdat`)
library(haven)
df = read_sas('hdd0318cy.sas7bdat')
df %>%
filter(yod=18)
df %>%
filter(yod==18)
"yod", "payfix","pay_ub92","age",
df %>%
filter(yod==18)
df %>% select( "yod", "payfix","pay_ub92","age",
"sex","raceethn","provider","moa",
"yoa","mod","admtype", "asource" ,
"preopday" ,"los", "service" , "icu","ccu",
"dispub92", "payer"  ,"drg","trandb",
"randbg","randbs","orr", "anes","seq",
"lab","dtest", "ther","blood","phar",
"other","patcon","bwght","total","tot" ,
"ecodub92","b_wt","pt_state","diag_adm","ancilar" ,
"campus","er_fee","er_chrg","er_mode","obs_chrg",
"obs_hour","psycchrg","nicu_day")
write_csv(df, 'midterm.csv')
view(df)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(knitr)
library(ggplot2)
df <- read_csv('https://bryantstats.github.io/math421/data/titanic.csv')
df <- df %>%
mutate(Survived = as.character(Survived),
Pclass = as.character(Pclass))
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Fare))+
facet_wrap(~Sex)
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Fare))+
facet_wrap(~Pclass+Survived)
df %>% ggplot()+
geom_bar(mapping=aes(x=Pclass, fill=Survived),
position = 'dodge')
df %>% ggplot()+
geom_col(mapping=aes(x=Pclass, y =Survived),
position = 'fill')
df %>% ggplot()+
geom_col(mapping=aes(x=Sex, y =Survived),
position = 'fill')
df
df %>% ggplot()+
geom_bar(mapping=aes(x=Pclass, fill=Survived),
position = 'fill')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
plot(forest_ranger)
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl)
pred <- predict(forest_ranger2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
trControl = trainControl(method = "cv",
number = 5)
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
forest_ranger2 <- train(target~., data=df_train,
method = "lda",
trControl = trControl)
results <- resamples(list('Ranger' = forest_ranger,
'LDA'=forest_ranger2 ))
bwplot(results)
df3 = df3 %>% select("yod", "payfix","pay_ub92" "los", "tot")
df3 = df3 %>% select("yod", "payfix","pay_ub92", "los","service" , "icu", "tot")
library(haven)
library(tidyverse)
library(caret)
df3 = df3 %>% select("yod", "payfix","pay_ub92", "los","service" , "icu", "tot")
library(haven)
library(tidyverse)
library(caret)
df3 = df3 %>% select("payfix","pay_ub92", "los","service" , "icu", "tot")
library(haven)
library(tidyverse)
library(caret)
df3 = read_csv('midterm.csv')
df3 = df3 %>% select("payfix","pay_ub92", "los","service" , "icu", "tot")
df3$target <- ifelse(df3$tot<mean(df3$tot),
'low','high')
df3 = df3 %>% select(-tot)
splitIndex <- createDataPartition(df3$target, p = .10,
list = FALSE)
df_train <- df3[ splitIndex,]
df_test <- df3[-splitIndex,]
library(rpart)
tree_model <- rpart(target ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rattle)
fancyRpartPlot(tree_model)
tree_model$variable.importance
barplot(tree_model$variable.importance)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger3 <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
library(haven)
library(tidyverse)
library(caret)
df3 = read_csv('midterm.csv')
df3 = df3 %>% select("payfix","pay_ub92", "los","service" , "icu", "tot")
df3$target1 <- ifelse(df3$tot<mean(df3$tot),
'low','high')
df3 = df3 %>% select(-tot)
splitIndex <- createDataPartition(df3$target, p = .10,
list = FALSE)
library(haven)
library(tidyverse)
library(caret)
df3 = read_csv('midterm.csv')
df3 = df3 %>% select("payfix","pay_ub92", "los","service" , "icu", "tot")
df3$target1 <- ifelse(df3$tot<mean(df3$tot),
'low','high')
df3 = df3 %>% select(-tot)
splitIndex <- createDataPartition(df3$target1, p = .10,
list = FALSE)
df_train <- df3[ splitIndex,]
df_test <- df3[-splitIndex,]
library(rpart)
tree_model <- rpart(target ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rpart)
tree_model <- rpart(target1 ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rattle)
fancyRpartPlot(tree_model)
tree_model$variable.importance
barplot(tree_model$variable.importance)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger3 <- train(target1~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger3 <- train(target1~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target1~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target1~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
library(haven)
library(tidyverse)
library(caret)
df3 = read_csv('midterm.csv')
df3 = df3 %>% select("age","sex","provider","moa","mod","campus", "los", "tot")
df3$target <- ifelse(df3$tot<median(df3$tot),
'low','high')
df3 = df3 %>% select(-tot)
splitIndex <- createDataPartition(df3$target, p = .10,
list = FALSE)
df_train <- df3[ splitIndex,]
df_test <- df3[-splitIndex,]
library(rpart)
tree_model <- rpart(target ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rattle)
fancyRpartPlot(tree_model)
tree_model$variable.importance
barplot(tree_model$variable.importance)
library(caret)
trControl = trainControl(method = "cv",
number = 5)
tuneGrid = expand.grid(mtry = 2:4,
splitrule = c('gini', 'extratrees'),
min.node.size = c(1:5))
forest_ranger <- train(target~., data=df_train,
method = "ranger",
trControl = trControl,
tuneGrid = tuneGrid)
